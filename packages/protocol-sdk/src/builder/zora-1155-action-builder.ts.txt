import { zoraCreator1155ImplABI } from "@zoralabs/protocol-deployments";
import { Address, PublicClient, encodeFunctionData, Hex } from "viem";

export const Zora1155Permissions = {
  Admin: 1,
  Minter: 2,
  SalesConfiguration: 4,
} as const;

type Zora1155PermissionsValues = 1 | 2 | 4;

export class Zora1155ActionBuilder {
  nextTokenId = 0n;
  currentTokenId = 0n;
  assertTokenId = false;
  allowWarnings = true;
  publicClient: PublicClient;
  target: Address;
  actions: Hex[] = [];

  constructor({
    target,
    publicClient,
  }: {
    target: Address;
    publicClient: PublicClient;
  }) {
    this.target = target;
    this.publicClient = publicClient;
  }

  async setup() {
    // 1: does the contract exist?
    let contractVersion: undefined | string;
    try {
      contractVersion = await this.publicClient.readContract({
        address: this.target,
        abi: zoraCreator1155ImplABI,
        functionName: "contractVersion",
      });
    } catch (err: any) {
      // Assume contract does not exist and that the latest contract version can be used
    }

    // Get the expected tokenId
    if (contractVersion) {
      this.nextTokenId = await this.publicClient.readContract({
        address: this.target,
        abi: zoraCreator1155ImplABI,
        functionName: "nextTokenId",
      });
    } else {
      this.nextTokenId = 1n;
    }

    this.currentTokenId = this.nextTokenId - 1n;
  }

  private checkVersionGreaterThan(desiredVersion: string) {
    // TODO implement
    return true;
  }

  private incrementTokenId() {
    this.currentTokenId += 1n;
  }

  private getRelativeTokenIdIfNeeded(tokenId: bigint | undefined) {
    if (tokenId) {
      return tokenId;
    }
    this.assertTokenId = true;
    return this.currentTokenId;
  }

  adminMint({
    tokenId,
    data,
    amount,
    recipient,
  }: {
    recipient: Address;
    tokenId?: bigint;
    amount: bigint;
    data?: Hex;
  }) {
    this.actions.push(
      encodeFunctionData({
        abi: zoraCreator1155ImplABI,
        functionName: "adminMint",
        args: [
          recipient,
          this.getRelativeTokenIdIfNeeded(tokenId),
          amount,
          data || "0x",
        ],
      }),
    );

    return this;
  }

  addPermission({
    tokenId,
    user,
    permissions,
  }: {
    user: Address;
    permissions: Zora1155PermissionsValues[];
    tokenId?: bigint;
  }) {
    this.actions.push(
      encodeFunctionData({
        abi: zoraCreator1155ImplABI,
        functionName: "addPermission",
        args: [
          this.getRelativeTokenIdIfNeeded(tokenId),
          user,
          permissions.reduce((last, current) => last + BigInt(current), 0n),
        ],
      }),
    );

    return this;
  }

  removePermissions({
    tokenId,
    user,
    permissions,
  }: {
    tokenId?: bigint;
    user: Address;
    permissions: Zora1155PermissionsValues[];
  }) {
    this.actions.push(
      encodeFunctionData({
        abi: zoraCreator1155ImplABI,
        functionName: "removePermission",
        args: [
          this.getRelativeTokenIdIfNeeded(tokenId),
          user,
          permissions.reduce((last, current) => last + BigInt(current), 0n),
        ],
      }),
    );

    return this;
  }

  setupNewToken({
    newUri,
    maxSupply,
    createReferral,
  }: {
    newUri: string;
    maxSupply: bigint;
    createReferral?: Address;
  }) {
    const contractSupportsCreateReferral =
      this.checkVersionGreaterThan("0.0.3");
    // if (createReferral && contractVersion < CREATE_REFERRAL_REQUIRED) throw CreateReferralNotSupportedOnContract();
    if (createReferral && contractSupportsCreateReferral) {
      this.actions.push(
        encodeFunctionData({
          abi: zoraCreator1155ImplABI,
          functionName: "setupNewTokenWithCreateReferral",
          args: [newUri, maxSupply, createReferral],
        }),
      );
    } else {
      this.actions.push(
        encodeFunctionData({
          abi: zoraCreator1155ImplABI,
          functionName: "setupNewToken",
          args: [newUri, maxSupply],
        }),
      );
    }
    this.incrementTokenId();

    return this;
  }

  generate() {
    if (this.assertTokenId) {
      this.actions.push(
        encodeFunctionData({
          abi: zoraCreator1155ImplABI,
          functionName: "assumeLastTokenIdMatches",
          args: [this.currentTokenId],
        }),
      );
    }

    return this.actions;
  }
}
